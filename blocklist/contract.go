// Code generated
// This file is a generated precompile contract config with stubbed abstract functions.
// The file is generated by a template. Please inspect every code and comment in this file before use.

package blocklist

import (
	"errors"
	"fmt"
	"math/big"

	"github.com/ava-labs/subnet-evm/accounts/abi"
	"github.com/ava-labs/subnet-evm/precompile/contract"
	"github.com/ava-labs/subnet-evm/vmerrs"

	_ "embed"

	"github.com/ethereum/go-ethereum/common"
)

const (
	// Gas costs for each function. These are set to 1 by default.
	// You should set a gas cost for each function in your contract.
	// Generally, you should not set gas costs very low as this may cause your network to be vulnerable to DoS attacks.
	// There are some predefined gas costs in contract/utils.go that you can use.
	BlockAddressGasCost   uint64 = contract.ReadGasCostPerSlot + contract.WriteGasCostPerSlot /* SET A GAS COST HERE */
	ChangeAdminGasCost    uint64 = contract.ReadGasCostPerSlot + contract.WriteGasCostPerSlot /* SET A GAS COST HERE */
	IsAdminGasCost        uint64 = contract.ReadGasCostPerSlot                                /* SET A GAS COST HERE */
	ReadBlockListGasCost  uint64 = contract.ReadGasCostPerSlot                                /* SET A GAS COST HERE */
	UnblockAddressGasCost uint64 = contract.ReadGasCostPerSlot + contract.WriteGasCostPerSlot /* SET A GAS COST HERE */
)

// CUSTOM CODE STARTS HERE
// Reference imports to suppress errors from unused imports. This code and any unnecessary imports can be removed.
var (
	_ = abi.JSON
	_ = errors.New
	_ = big.NewInt
	_ = vmerrs.ErrOutOfGas
	_ = common.Big0
)

// Singleton StatefulPrecompiledContract and signatures.
var (
	// BlockListRawABI contains the raw ABI of BlockList contract.
	//go:embed contract.abi
	BlockListRawABI string

	BlockListABI = contract.ParseABI(BlockListRawABI)

	BlockListPrecompile = createBlockListPrecompile()
)

var (
	ErrUnauthorized           = errors.New("unauthorized")
	BlockListStorageNameSpace = []byte("BLOCK") // creating namespacing using 5 bytes

	// storageKeyHash is the hash of the storage key "storageKey" in the contract storage.
	// This is used to store the value of the greeting in the contract storage.
	// It is important to use a unique key here to avoid conflicts with other storage keys
	// like addresses, AllowList, etc.
	adminStorageKeyHash = common.BytesToHash([]byte("adminStorageKey"))
)

// UnpackBlockAddressInput attempts to unpack [input] into the common.Address type argument
// assumes that [input] does not include selector (omits first 4 func signature bytes)
func UnpackBlockAddressInput(input []byte) (common.Address, error) {
	res, err := BlockListABI.UnpackInput("blockAddress", input, false)
	if err != nil {
		return common.Address{}, err
	}
	unpacked := *abi.ConvertType(res[0], new(common.Address)).(*common.Address)
	return unpacked, nil
}

// PackBlockAddress packs [addr] of type common.Address into the appropriate arguments for blockAddress.
// the packed bytes include selector (first 4 func signature bytes).
// This function is mostly used for tests.
func PackBlockAddress(addr common.Address) ([]byte, error) {
	return BlockListABI.Pack("blockAddress", addr)
}

func blockAddress(accessibleState contract.AccessibleState, caller common.Address, addr common.Address, input []byte, suppliedGas uint64, readOnly bool) (ret []byte, remainingGas uint64, err error) {
	if remainingGas, err = contract.DeductGas(suppliedGas, BlockAddressGasCost); err != nil {
		return nil, 0, err
	}
	if readOnly {
		return nil, remainingGas, vmerrs.ErrWriteProtection
	}
	// attempts to unpack [input] into the arguments to the BlockAddressInput.
	// Assumes that [input] does not include selector
	// You can use unpacked [inputStruct] variable in your code
	inputStruct, err := UnpackBlockAddressInput(input)
	if err != nil {
		return nil, remainingGas, err
	}

	userAddress := inputStruct // CUSTOM CODE OPERATES ON INPUT
	if userAddress == caller {
		return nil, remainingGas, fmt.Errorf("%w: cannot ban yourself", ErrUnauthorized)
	}

	// CUSTOM CODE STARTS HERE
	stateDB := accessibleState.GetStateDB()

	// check if the caller is the admin
	adminAddress := ReadAdmin(stateDB)
	if adminAddress != caller {
		return nil, remainingGas, fmt.Errorf("%w: %s", ErrUnauthorized, caller)
	}

	eventData := AddressBlockedEventData{
		Reason: "",
	}

	topics, data, err := PackAddressBlockedEvent(userAddress, eventData)
	if err != nil {
		return nil, remainingGas, err
	}
	// Charge the gas for emitting the event.
	eventGasCost := GetAddressBlockedEventGasCost(eventData)
	if remainingGas, err = contract.DeductGas(remainingGas, eventGasCost); err != nil {
		return nil, 0, err
	}

	// Emit the event
	stateDB.AddLog(
		ContractAddress,
		topics,
		data,
		accessibleState.GetBlockContext().Number().Uint64(),
	)

	ChangeBlockStatus(stateDB, userAddress, true)
	// this function does not return an output, leave this one as is
	packedOutput := []byte{}

	// Return the packed output and the remaining gas
	return packedOutput, remainingGas, nil
}

// UnpackChangeAdminInput attempts to unpack [input] into the common.Address type argument
// assumes that [input] does not include selector (omits first 4 func signature bytes)
func UnpackChangeAdminInput(input []byte) (common.Address, error) {
	res, err := BlockListABI.UnpackInput("changeAdmin", input, false)
	if err != nil {
		return common.Address{}, err
	}
	unpacked := *abi.ConvertType(res[0], new(common.Address)).(*common.Address)
	return unpacked, nil
}

// PackChangeAdmin packs [addr] of type common.Address into the appropriate arguments for changeAdmin.
// the packed bytes include selector (first 4 func signature bytes).
// This function is mostly used for tests.
func PackChangeAdmin(addr common.Address) ([]byte, error) {
	return BlockListABI.Pack("changeAdmin", addr)
}

func changeAdmin(accessibleState contract.AccessibleState, caller common.Address, addr common.Address, input []byte, suppliedGas uint64, readOnly bool) (ret []byte, remainingGas uint64, err error) {
	if remainingGas, err = contract.DeductGas(suppliedGas, ChangeAdminGasCost); err != nil {
		return nil, 0, err
	}
	if readOnly {
		return nil, remainingGas, vmerrs.ErrWriteProtection
	}
	// attempts to unpack [input] into the arguments to the ChangeAdminInput.
	// Assumes that [input] does not include selector
	// You can use unpacked [inputStruct] variable in your code
	inputStruct, err := UnpackChangeAdminInput(input)
	if err != nil {
		return nil, remainingGas, err
	}

	// CUSTOM CODE STARTS HERE
	stateDB := accessibleState.GetStateDB()

	// check if the caller is the admin
	adminAddress := ReadAdmin(stateDB)
	if adminAddress != caller {
		return nil, remainingGas, fmt.Errorf("%w: %s", ErrUnauthorized, caller)
	}

	newAdminAddress := inputStruct // CUSTOM CODE OPERATES ON INPUT

	topics, data, err := PackAdminChangedEvent(newAdminAddress)
	if err != nil {
		return nil, remainingGas, err
	}
	// Charge the gas for emitting the event.
	eventGasCost := GetAdminChangedEventGasCost()
	if remainingGas, err = contract.DeductGas(remainingGas, eventGasCost); err != nil {
		return nil, 0, err
	}

	// Emit the event
	stateDB.AddLog(
		ContractAddress,
		topics,
		data,
		accessibleState.GetBlockContext().Number().Uint64(),
	)

	SetAdmin(stateDB, newAdminAddress)

	// this function does not return an output, leave this one as is
	packedOutput := []byte{}

	// Return the packed output and the remaining gas
	return packedOutput, remainingGas, nil
}

func SetAdmin(stateDB contract.StateDB, address common.Address) {
	addressPadded := common.LeftPadBytes(address.Bytes(), common.HashLength)
	addressHash := common.BytesToHash(addressPadded) // it is just converting to [32]bytes

	stateDB.SetState(ContractAddress, adminStorageKeyHash, addressHash)
}

func ReadAdmin(stateDB contract.StateDB) common.Address {
	value := stateDB.GetState(ContractAddress, adminStorageKeyHash)
	address := common.BytesToAddress(value.Bytes())
	return address
}

func GetBlockListUserKey(address common.Address) common.Hash {
	key := make([]byte, common.HashLength)
	copy(key[:5], BlockListStorageNameSpace)
	copy(key[5:], address.Bytes())

	return common.BytesToHash(key)
}

func ChangeBlockStatus(stateDB contract.StateDB, address common.Address, isBlocked bool) {
	key := GetBlockListUserKey(address)
	value := common.BytesToHash([]byte{func() byte {
		if isBlocked {
			return 1
		}
		return 0
	}()})

	stateDB.SetState(ContractAddress, key, value)
}

func IsAddressBlocked(stateDB contract.StateDB, addr common.Address) bool {
	key := GetBlockListUserKey(addr)
	value := stateDB.GetState(ContractAddress, key)
	return value[0] == 1
}

// UnpackIsAdminInput attempts to unpack [input] into the common.Address type argument
// assumes that [input] does not include selector (omits first 4 func signature bytes)
func UnpackIsAdminInput(input []byte) (common.Address, error) {
	res, err := BlockListABI.UnpackInput("isAdmin", input, false)
	if err != nil {
		return common.Address{}, err
	}
	unpacked := *abi.ConvertType(res[0], new(common.Address)).(*common.Address)
	return unpacked, nil
}

// PackIsAdmin packs [addr] of type common.Address into the appropriate arguments for isAdmin.
// the packed bytes include selector (first 4 func signature bytes).
// This function is mostly used for tests.
func PackIsAdmin(addr common.Address) ([]byte, error) {
	return BlockListABI.Pack("isAdmin", addr)
}

// PackIsAdminOutput attempts to pack given isAdmin of type bool
// to conform the ABI outputs.
func PackIsAdminOutput(isAdmin bool) ([]byte, error) {
	return BlockListABI.PackOutput("isAdmin", isAdmin)
}

// UnpackIsAdminOutput attempts to unpack given [output] into the bool type output
// assumes that [output] does not include selector (omits first 4 func signature bytes)
func UnpackIsAdminOutput(output []byte) (bool, error) {
	res, err := BlockListABI.Unpack("isAdmin", output)
	if err != nil {
		return false, err
	}
	unpacked := *abi.ConvertType(res[0], new(bool)).(*bool)
	return unpacked, nil
}

func isAdmin(accessibleState contract.AccessibleState, caller common.Address, addr common.Address, input []byte, suppliedGas uint64, readOnly bool) (ret []byte, remainingGas uint64, err error) {
	if remainingGas, err = contract.DeductGas(suppliedGas, IsAdminGasCost); err != nil {
		return nil, 0, err
	}
	// attempts to unpack [input] into the arguments to the IsAdminInput.
	// Assumes that [input] does not include selector
	// You can use unpacked [inputStruct] variable in your code
	inputStruct, err := UnpackIsAdminInput(input)
	if err != nil {
		return nil, remainingGas, err
	}

	// CUSTOM CODE STARTS HERE
	_ = inputStruct // CUSTOM CODE OPERATES ON INPUT

	var output bool // CUSTOM CODE FOR AN OUTPUT
	packedOutput, err := PackIsAdminOutput(output)
	if err != nil {
		return nil, remainingGas, err
	}

	// Return the packed output and the remaining gas
	return packedOutput, remainingGas, nil
}

// UnpackReadBlockListInput attempts to unpack [input] into the common.Address type argument
// assumes that [input] does not include selector (omits first 4 func signature bytes)
func UnpackReadBlockListInput(input []byte) (common.Address, error) {
	res, err := BlockListABI.UnpackInput("readBlockList", input, false)
	if err != nil {
		return common.Address{}, err
	}
	unpacked := *abi.ConvertType(res[0], new(common.Address)).(*common.Address)
	return unpacked, nil
}

// PackReadBlockList packs [addr] of type common.Address into the appropriate arguments for readBlockList.
// the packed bytes include selector (first 4 func signature bytes).
// This function is mostly used for tests.
func PackReadBlockList(addr common.Address) ([]byte, error) {
	return BlockListABI.Pack("readBlockList", addr)
}

// PackReadBlockListOutput attempts to pack given role of type *big.Int
// to conform the ABI outputs.
func PackReadBlockListOutput(role *big.Int) ([]byte, error) {
	return BlockListABI.PackOutput("readBlockList", role)
}

// UnpackReadBlockListOutput attempts to unpack given [output] into the *big.Int type output
// assumes that [output] does not include selector (omits first 4 func signature bytes)
func UnpackReadBlockListOutput(output []byte) (*big.Int, error) {
	res, err := BlockListABI.Unpack("readBlockList", output)
	if err != nil {
		return new(big.Int), err
	}
	unpacked := *abi.ConvertType(res[0], new(*big.Int)).(**big.Int)
	return unpacked, nil
}

func BoolToBigInt(b bool) *big.Int {
	if b {
		return big.NewInt(1)
	}
	return big.NewInt(0)
}

func readBlockList(accessibleState contract.AccessibleState, caller common.Address, addr common.Address, input []byte, suppliedGas uint64, readOnly bool) (ret []byte, remainingGas uint64, err error) {
	if remainingGas, err = contract.DeductGas(suppliedGas, ReadBlockListGasCost); err != nil {
		return nil, 0, err
	}
	// attempts to unpack [input] into the arguments to the ReadBlockListInput.
	// Assumes that [input] does not include selector
	// You can use unpacked [inputStruct] variable in your code
	inputStruct, err := UnpackReadBlockListInput(input)
	if err != nil {
		return nil, remainingGas, err
	}

	// CUSTOM CODE STARTS HERE
	stateDB := accessibleState.GetStateDB()
	userAddress := inputStruct // CUSTOM CODE OPERATES ON INPUT
	blocked := IsAddressBlocked(stateDB, userAddress)

	var output *big.Int = BoolToBigInt(blocked) // CUSTOM CODE FOR AN OUTPUT
	packedOutput, err := PackReadBlockListOutput(output)
	if err != nil {
		return nil, remainingGas, err
	}

	// Return the packed output and the remaining gas
	return packedOutput, remainingGas, nil
}

// UnpackUnblockAddressInput attempts to unpack [input] into the common.Address type argument
// assumes that [input] does not include selector (omits first 4 func signature bytes)
func UnpackUnblockAddressInput(input []byte) (common.Address, error) {
	res, err := BlockListABI.UnpackInput("unblockAddress", input, false)
	if err != nil {
		return common.Address{}, err
	}
	unpacked := *abi.ConvertType(res[0], new(common.Address)).(*common.Address)
	return unpacked, nil
}

// PackUnblockAddress packs [addr] of type common.Address into the appropriate arguments for unblockAddress.
// the packed bytes include selector (first 4 func signature bytes).
// This function is mostly used for tests.
func PackUnblockAddress(addr common.Address) ([]byte, error) {
	return BlockListABI.Pack("unblockAddress", addr)
}

func unblockAddress(accessibleState contract.AccessibleState, caller common.Address, addr common.Address, input []byte, suppliedGas uint64, readOnly bool) (ret []byte, remainingGas uint64, err error) {
	if remainingGas, err = contract.DeductGas(suppliedGas, UnblockAddressGasCost); err != nil {
		return nil, 0, err
	}
	if readOnly {
		return nil, remainingGas, vmerrs.ErrWriteProtection
	}
	// attempts to unpack [input] into the arguments to the UnblockAddressInput.
	// Assumes that [input] does not include selector
	// You can use unpacked [inputStruct] variable in your code
	inputStruct, err := UnpackUnblockAddressInput(input)
	if err != nil {
		return nil, remainingGas, err
	}

	// CUSTOM CODE STARTS HERE
	stateDB := accessibleState.GetStateDB()

	// check if the caller is the admin
	adminAddress := ReadAdmin(stateDB)
	if adminAddress != caller {
		return nil, remainingGas, fmt.Errorf("%w: %s", ErrUnauthorized, caller)
	}

	userAddress := inputStruct // CUSTOM CODE OPERATES ON INPUT
	eventData := AddressUnblockedEventData{
		Reason: "",
	}

	topics, data, err := PackAddressUnblockedEvent(userAddress, eventData)
	if err != nil {
		return nil, remainingGas, err
	}
	// Charge the gas for emitting the event.
	eventGasCost := GetAddressUnblockedEventGasCost(eventData)
	if remainingGas, err = contract.DeductGas(remainingGas, eventGasCost); err != nil {
		return nil, 0, err
	}

	// Emit the event
	stateDB.AddLog(
		ContractAddress,
		topics,
		data,
		accessibleState.GetBlockContext().Number().Uint64(),
	)

	ChangeBlockStatus(stateDB, userAddress, false)

	// this function does not return an output, leave this one as is
	packedOutput := []byte{}

	// Return the packed output and the remaining gas
	return packedOutput, remainingGas, nil
}

// createBlockListPrecompile returns a StatefulPrecompiledContract with getters and setters for the precompile.

func createBlockListPrecompile() contract.StatefulPrecompiledContract {
	var functions []*contract.StatefulPrecompileFunction

	abiFunctionMap := map[string]contract.RunStatefulPrecompileFunc{
		"blockAddress":   blockAddress,
		"changeAdmin":    changeAdmin,
		"isAdmin":        isAdmin,
		"readBlockList":  readBlockList,
		"unblockAddress": unblockAddress,
	}

	for name, function := range abiFunctionMap {
		method, ok := BlockListABI.Methods[name]
		if !ok {
			panic(fmt.Errorf("given method (%s) does not exist in the ABI", name))
		}
		functions = append(functions, contract.NewStatefulPrecompileFunction(method.ID, function))
	}
	// Construct the contract with no fallback function.
	statefulContract, err := contract.NewStatefulPrecompileContract(nil, functions)
	if err != nil {
		panic(err)
	}
	return statefulContract
}
